# Enhanced Laptop Inspection Script - Professional Quality (FIXED & CLEANED)
# Run as Administrator for best results
param(
    [string]$OutputPath = "$env:USERPROFILE\Desktop\Laptop_Report_$(Get-Date -Format 'yyyyMMdd_HHmmss').html"
)

# Suppress unwanted output
$InformationPreference = 'SilentlyContinue'
$WarningPreference = 'SilentlyContinue'
$ErrorActionPreference = 'Stop'

Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force -ErrorAction SilentlyContinue | Out-Null

$ReportData = @{
    SystemInfo    = @{}
    StorageInfo   = @()
    NetworkInfo   = @()
    BatteryInfo   = @{}
    PnpIssues     = @()
    ThermalInfo   = @{}
    MemoryInfo    = @{}
    DisplayInfo   = @{}
    Errors        = @()
    Warnings      = @()
    TestResults   = @{}
    OverallScore  = 0
}

function Add-TestResult {
    param($TestName, $Result, $Status, $Details = "", $Weight = 1)
    $script:ReportData.TestResults[$TestName] = @{
        Result    = $Result
        Status    = $Status
        Details   = $Details
        Weight    = $Weight
        Timestamp = Get-Date -Format "HH:mm:ss"
    }
    $color = switch ($Status) {
        "PASS" { "Green" }
        "WARN" { "Yellow" }
        "FAIL" { "Red" }
        "INFO" { "Cyan" }
        default { "White" }
    }
    $icon = switch ($Status) {
        "PASS" { "✓" }
        "WARN" { "⚠" }
        "FAIL" { "✗" }
        "INFO" { "ℹ" }
        default { "•" }
    }
    Write-Host "$icon [$Status] $TestName`: $Result" -ForegroundColor $color
    if ($Details) { Write-Host "   └─ $Details" -ForegroundColor Gray }
}

function Calculate-OverallScore {
    $totalWeight = 0
    $weightedScore = 0
    foreach ($test in $ReportData.TestResults.Values) {
        $score = switch ($test.Status) {
            "PASS" { 100 }
            "WARN" { 60 }
            "FAIL" { 0 }
            "INFO" { 100 }
        }
        $weightedScore += $score * $test.Weight
        $totalWeight += $test.Weight
    }
    if ($totalWeight -gt 0) {
        $ReportData.OverallScore = [math]::Round($weightedScore / $totalWeight, 0)
    }
}

Write-Host "🔍 Starting Enhanced Laptop Inspection..." -ForegroundColor Cyan
Write-Host "=" * 60 -ForegroundColor Gray

#-------------------------------------------------
# 1. ENHANCED SYSTEM INFORMATION
#-------------------------------------------------
Write-Host "`n📊 Gathering System Information..." -ForegroundColor Cyan
try {
    $OS  = Get-CimInstance Win32_OperatingSystem -ErrorAction Stop
    $CS  = Get-CimInstance Win32_ComputerSystem   -ErrorAction Stop
    $CPU = Get-CimInstance Win32_Processor        -ErrorAction Stop | Select-Object -First 1
    $BIOS = Get-CimInstance Win32_BIOS -ErrorAction Stop
    $ReportData.SystemInfo = @{
        OSName         = $OS.Caption
        OSVersion      = $OS.Version
        OSArchitecture = $OS.OSArchitecture
        ComputerName   = $CS.Name
        Manufacturer   = $CS.Manufacturer
        Model          = $CS.Model
        TotalRAM_GB    = [math]::Round($CS.TotalPhysicalMemory / 1GB, 2)
        CPUName        = $CPU.Name.Trim()
        CPUCores       = $CPU.NumberOfCores
        CPUThreads     = $CPU.NumberOfLogicalProcessors
        CPUSpeed       = [math]::Round($CPU.MaxClockSpeed / 1000, 2)
        BIOSVersion    = $BIOS.SMBIOSBIOSVersion
        SerialNumber   = $BIOS.SerialNumber
        Uptime         = [math]::Round(((Get-Date) - $OS.LastBootUpTime).TotalHours, 1)
    }
    Add-TestResult "System Information" "$($ReportData.SystemInfo.Manufacturer) $($ReportData.SystemInfo.Model)" "PASS" "$($ReportData.SystemInfo.OSName) | $($ReportData.SystemInfo.CPUName)" 2

    if ($ReportData.SystemInfo.TotalRAM_GB -ge 16) {
        Add-TestResult "RAM Capacity" "$($ReportData.SystemInfo.TotalRAM_GB) GB" "PASS" "Excellent for modern applications" 3
    } elseif ($ReportData.SystemInfo.TotalRAM_GB -ge 8) {
        Add-TestResult "RAM Capacity" "$($ReportData.SystemInfo.TotalRAM_GB) GB" "PASS" "Good for most applications" 3
    } elseif ($ReportData.SystemInfo.TotalRAM_GB -ge 4) {
        Add-TestResult "RAM Capacity" "$($ReportData.SystemInfo.TotalRAM_GB) GB" "WARN" "Minimum for Windows 10/11" 3
    } else {
        Add-TestResult "RAM Capacity" "$($ReportData.SystemInfo.TotalRAM_GB) GB" "FAIL" "Insufficient for modern Windows" 3
    }

    if ($ReportData.SystemInfo.CPUCores -ge 4) {
        Add-TestResult "CPU Cores" "$($ReportData.SystemInfo.CPUCores) cores / $($ReportData.SystemInfo.CPUThreads) threads" "PASS" "Good multitasking capability" 2
    } else {
        Add-TestResult "CPU Cores" "$($ReportData.SystemInfo.CPUCores) cores / $($ReportData.SystemInfo.CPUThreads) threads" "WARN" "Limited multitasking" 2
    }
} catch {
    Add-TestResult "System Information" "Failed" "FAIL" $_.Exception.Message 2
    $ReportData.Errors += $_.Exception.Message
}

#-------------------------------------------------
# 2. MEMORY DETAILS
#-------------------------------------------------
Write-Host "`n🧠 Analyzing Memory Configuration..." -ForegroundColor Cyan
try {
    $MemoryModules = Get-CimInstance Win32_PhysicalMemory -ErrorAction Stop
    $memArray = Get-CimInstance Win32_PhysicalMemoryArray -ErrorAction Stop
    $ReportData.MemoryInfo = @{
        Modules = @()
        TotalSlots = $memArray.MemoryDevices
        UsedSlots = $MemoryModules.Count
    }
    foreach ($module in $MemoryModules) {
        $ReportData.MemoryInfo.Modules += [PSCustomObject]@{
            Capacity_GB = [math]::Round($module.Capacity / 1GB, 0)
            Speed = $module.Speed
            Manufacturer = $module.Manufacturer
            PartNumber = $module.PartNumber
            Location = $module.DeviceLocator
        }
    }
    $totalSlots = $ReportData.MemoryInfo.TotalSlots
    $usedSlots = $ReportData.MemoryInfo.UsedSlots
    Add-TestResult "Memory Slots" "$usedSlots of $totalSlots slots used" "INFO" "Upgrade potential available" 1
} catch {
    Add-TestResult "Memory Analysis" "Could not analyze" "WARN" $_.Exception.Message 1
}

#-------------------------------------------------
# 3. ENHANCED STORAGE ANALYSIS
#-------------------------------------------------
Write-Host "`n💾 Analyzing Storage Devices..." -ForegroundColor Cyan
try {
    $PhysicalDisks = Get-CimInstance Win32_DiskDrive -ErrorAction Stop
    foreach ($disk in $PhysicalDisks) {
        $SizeGB = [math]::Round($disk.Size / 1GB, 2)
        $Health = if ($disk.Status -eq "OK") { "Healthy" } else { "Warning" }
        $Media = "Unknown"
        if ($disk.MediaType) {
            $Media = $disk.MediaType
        } elseif ($disk.Model -match "SSD|Solid|NVMe") {
            $Media = "SSD"
        } elseif ($disk.InterfaceType -eq "IDE" -or $disk.Model -match "HDD|WD|Seagate") {
            $Media = "HDD"
        }
        $ReportData.StorageInfo += [PSCustomObject]@{
            Model  = $disk.Model.Trim()
            SizeGB = $SizeGB
            Health = $Health
            Media  = $Media
            Status = $disk.Status
            Interface = $disk.InterfaceType
        }
        $status = if ($disk.Status -eq "OK") { "PASS" } else { "FAIL" }
        $weight = if ($Media -eq "SSD") { 2 } else { 1 }
        Add-TestResult "Storage: $($disk.Model)" "$SizeGB GB $Media - $Health" $status "$($disk.InterfaceType) interface" $weight
    }
    $hasSSD = $ReportData.StorageInfo | Where-Object { $_.Media -eq "SSD" }
    if ($hasSSD) {
        Add-TestResult "Storage Type" "SSD Detected" "PASS" "Fast boot and application loading" 2
    } else {
        Add-TestResult "Storage Type" "No SSD Detected" "WARN" "Consider SSD upgrade for better performance" 2
    }
} catch {
    Add-TestResult "Storage Analysis" "Failed" "FAIL" $_.Exception.Message 2
}

#-------------------------------------------------
# 4. ENHANCED NETWORK ANALYSIS
#-------------------------------------------------
Write-Host "`n🌐 Checking Network Capabilities..." -ForegroundColor Cyan
try {
    $adapters = Get-CimInstance Win32_NetworkAdapter -ErrorAction Stop |
                Where-Object { $_.PhysicalAdapter -and ($_.Name -match "Ethernet|Wi-Fi|Wireless|802.11") }
    $hasWiFi = $false
    $hasEthernet = $false
    foreach ($nic in $adapters) {
        $speed = if ($nic.Speed -and $nic.Speed -gt 0) { [math]::Round($nic.Speed / 1Mb, 0) } else { "Unknown" }
        $status = switch ($nic.NetConnectionStatus) {
            2 { "Connected" }
            7 { "Disconnected" }
            default { "Unknown" }
        }
        if ($nic.Name -match "Wi-Fi|Wireless|802.11") { $hasWiFi = $true }
        if ($nic.Name -match "Ethernet") { $hasEthernet = $true }
        $ReportData.NetworkInfo += [PSCustomObject]@{
            Name   = $nic.Name
            Status = $status
            Speed  = if ($speed -ne "Unknown") { "$speed Mbps" } else { "Unknown" }
            MAC    = $nic.MACAddress
            Type   = if ($nic.Name -match "Wi-Fi|Wireless") { "WiFi" } else { "Ethernet" }
        }
        Add-TestResult "Network: $($nic.Name)" "$status" "PASS" "Speed: $speed Mbps" 1
    }
    if ($hasWiFi) {
        Add-TestResult "WiFi Capability" "Present" "PASS" "Wireless connectivity available" 2
    } else {
        Add-TestResult "WiFi Capability" "Missing" "WARN" "No wireless capability detected" 2
    }
    if ($hasEthernet) {
        Add-TestResult "Ethernet Port" "Present" "PASS" "Wired connectivity available" 1
    }
} catch {
    Add-TestResult "Network Analysis" "Failed" "FAIL" $_.Exception.Message 2
}

#-------------------------------------------------
# 5. COMPREHENSIVE BATTERY ANALYSIS (FIXED)
#-------------------------------------------------
Write-Host "`n🔋 Performing Battery Health Check..." -ForegroundColor Cyan
try {
    $Battery = Get-CimInstance Win32_Battery -ErrorAction SilentlyContinue | Select-Object -First 1
    if ($Battery) {
        $batReportPath = "$env:TEMP\battery_report_$(Get-Date -Format 'yyyyMMdd_HHmmss').html"
        $null = & powercfg /batteryreport /output $batReportPath 2>$null
        Start-Sleep -Milliseconds 1000

        $designCap = 0
        $fullCap = 0
        $cycleCount = 0
        if (Test-Path $batReportPath) {
            try {
                $reportContent = Get-Content $batReportPath -Raw -ErrorAction SilentlyContinue
                if ($reportContent -match 'DESIGN CAPACITY</td><td>([\d,]+)') {
                    $designCap = [int]($matches[1] -replace ',')
                }
                if ($reportContent -match 'FULL CHARGE CAPACITY</td><td>([\d,]+)') {
                    $fullCap = [int]($matches[1] -replace ',')
                }
                if ($reportContent -match 'CYCLE COUNT</td><td>(\d+)') {
                    $cycleCount = [int]$matches[1]
                }
            } catch {
                # Silent fallback
            }
        }

        $wear = if ($designCap -gt 0 -and $fullCap -gt 0) {
            [math]::Round((1 - $fullCap / $designCap) * 100, 1)
        } else {
            "Unknown"
        }

        $ReportData.BatteryInfo = @{
            Name         = $Battery.Name
            Status       = $Battery.Status
            Chemistry    = $Battery.Chemistry
            DesignCap    = if ($designCap -gt 0) { "$([math]::Round($designCap/1000,1)) mWh" } else { "Unknown" }
            FullCap      = if ($fullCap -gt 0) { "$([math]::Round($fullCap/1000,1)) mWh" } else { "Unknown" }
            WearPercent  = $wear
            Cycles       = $cycleCount
            ReportPath   = if (Test-Path $batReportPath) { $batReportPath } else { $null }
            HealthRating = "Unknown"
        }

        if ($wear -ne "Unknown") {
            if ($wear -le 20) {
                $ReportData.BatteryInfo.HealthRating = "Excellent"
                Add-TestResult "Battery Health" "$wear% wear - Excellent" "PASS" "Battery in great condition" 3
            } elseif ($wear -le 40) {
                $ReportData.BatteryInfo.HealthRating = "Good"
                Add-TestResult "Battery Health" "$wear% wear - Good" "PASS" "Battery still healthy" 3
            } elseif ($wear -le 60) {
                $ReportData.BatteryInfo.HealthRating = "Fair"
                Add-TestResult "Battery Health" "$wear% wear - Fair" "WARN" "Battery showing age, consider replacement" 3
            } else {
                $ReportData.BatteryInfo.HealthRating = "Poor"
                Add-TestResult "Battery Health" "$wear% wear - Poor" "FAIL" "Battery needs replacement" 3
            }
        } else {
            Add-TestResult "Battery Health" "Could not determine" "WARN" "Battery analysis incomplete" 2
        }
        Add-TestResult "Battery Detection" "$($Battery.Name)" "PASS" "Chemistry: $($Battery.Chemistry)" 2
        if ($cycleCount -gt 0) {
            if ($cycleCount -lt 300) {
                Add-TestResult "Battery Cycles" "$cycleCount cycles - Low" "PASS" "Battery lightly used" 1
            } elseif ($cycleCount -lt 500) {
                Add-TestResult "Battery Cycles" "$cycleCount cycles - Moderate" "PASS" "Normal usage" 1
            } elseif ($cycleCount -lt 800) {
                Add-TestResult "Battery Cycles" "$cycleCount cycles - High" "WARN" "Considerable use" 1
            } else {
                Add-TestResult "Battery Cycles" "$cycleCount cycles - Very High" "WARN" "Heavily used battery" 1
            }
        }
    } else {
        Add-TestResult "Battery Detection" "No battery detected" "INFO" "Desktop system or battery not present" 0
    }
} catch {
    Add-TestResult "Battery Analysis" "Failed" "WARN" $_.Exception.Message 1
}

#-------------------------------------------------
# 6. HARDWARE DEVICE STATUS
#-------------------------------------------------
Write-Host "`n🔧 Checking Hardware Device Status..." -ForegroundColor Cyan
try {
    $problemDevices = Get-CimInstance Win32_PnPEntity -ErrorAction Stop |
                     Where-Object { $_.ConfigManagerErrorCode -ne 0 }
    if ($problemDevices) {
        foreach ($dev in $problemDevices) {
            $ReportData.PnpIssues += [PSCustomObject]@{
                Name    = $dev.Name
                Status  = $dev.Status
                Problem = $dev.ConfigManagerErrorCode
                Class   = $dev.PNPClass
            }
            Add-TestResult "Device Problem" "$($dev.Name)" "FAIL" "Error code: $($dev.ConfigManagerErrorCode)" 2
        }
    } else {
        Add-TestResult "Hardware Devices" "All devices functioning" "PASS" "No device manager errors found" 2
    }
    $audioDevices = Get-CimInstance Win32_SoundDevice -ErrorAction SilentlyContinue
    if ($audioDevices) {
        Add-TestResult "Audio Devices" "$($audioDevices.Count) device(s) detected" "PASS" "" 1
    } else {
        Add-TestResult "Audio Devices" "No audio devices" "WARN" "Audio functionality may be limited" 1
    }
} catch {
    Add-TestResult "Device Status Check" "Could not enumerate" "WARN" $_.Exception.Message 1
}

#-------------------------------------------------
# 7. DISPLAY INFORMATION
#-------------------------------------------------
Write-Host "`n🖥️ Analyzing Display Configuration..." -ForegroundColor Cyan
try {
    $monitors = Get-CimInstance Win32_DesktopMonitor -ErrorAction SilentlyContinue
    $videoControllers = Get-CimInstance Win32_VideoController -ErrorAction Stop
    $ReportData.DisplayInfo = @{ Monitors = @() }
    foreach ($monitor in $monitors) {
        if ($monitor.Name -and $monitor.Name -ne "Default Monitor") {
            $ReportData.DisplayInfo.Monitors += [PSCustomObject]@{
                Name = $monitor.Name
                ScreenWidth = $monitor.ScreenWidth
                ScreenHeight = $monitor.ScreenHeight
            }
        }
    }
    foreach ($gpu in $videoControllers) {
        if ($gpu.Name -and $gpu.AdapterRAM) {
            $vramGB = [math]::Round($gpu.AdapterRAM / 1GB, 1)
            Add-TestResult "Graphics" "$($gpu.Name)" "PASS" "VRAM: $vramGB GB" 1
        } elseif ($gpu.Name) {
            Add-TestResult "Graphics" "$($gpu.Name)" "PASS" "" 1
        }
    }
} catch {
    Add-TestResult "Display Analysis" "Could not analyze" "INFO" $_.Exception.Message 0
}

#-------------------------------------------------
# 8. SYSTEM HEALTH & PERFORMANCE
#-------------------------------------------------
Write-Host "`n💊 Checking System Health..." -ForegroundColor Cyan
try {
    $services = Get-Service -ErrorAction Stop
    $runningServices = ($services | Where-Object { $_.Status -eq "Running" }).Count
    $totalServices = $services.Count
    Add-TestResult "Windows Services" "$runningServices/$totalServices running" "PASS" "" 1

    $criticalEvents = Get-WinEvent -FilterHashtable @{LogName='System'; Level=1} -MaxEvents 5 -ErrorAction SilentlyContinue
    $errorEvents = Get-WinEvent -FilterHashtable @{LogName='System'; Level=2} -MaxEvents 10 -ErrorAction SilentlyContinue
    if ($criticalEvents) {
        Add-TestResult "Critical System Events" "$($criticalEvents.Count) found" "WARN" "Check Event Viewer for details" 2
    } else {
        Add-TestResult "Critical System Events" "None recent" "PASS" "System appears stable" 1
    }

    $drives = Get-CimInstance Win32_LogicalDisk -Filter "DriveType=3" -ErrorAction SilentlyContinue
    foreach ($drive in $drives) {
        $freeSpacePercent = [math]::Round(($drive.FreeSpace / $drive.Size) * 100, 1)
        if ($freeSpacePercent -lt 10) {
            Add-TestResult "Disk Space $($drive.DeviceID)" "$freeSpacePercent% free" "FAIL" "Critical low space" 2
        } elseif ($freeSpacePercent -lt 20) {
            Add-TestResult "Disk Space $($drive.DeviceID)" "$freeSpacePercent% free" "WARN" "Low disk space" 1
        } else {
            Add-TestResult "Disk Space $($drive.DeviceID)" "$freeSpacePercent% free" "PASS" "" 1
        }
    }
} catch {
    Add-TestResult "System Health Check" "Could not complete" "WARN" $_.Exception.Message 1
}

Calculate-OverallScore

#-------------------------------------------------
# ENHANCED HTML REPORT GENERATION
#-------------------------------------------------
Write-Host "`n📄 Generating Enhanced HTML Report..." -ForegroundColor Cyan
$pass = ($ReportData.TestResults.Values | Where-Object { $_.Status -eq "PASS" }).Count
$warn = ($ReportData.TestResults.Values | Where-Object { $_.Status -eq "WARN" }).Count
$fail = ($ReportData.TestResults.Values | Where-Object { $_.Status -eq "FAIL" }).Count
$info = ($ReportData.TestResults.Values | Where-Object { $_.Status -eq "INFO" }).Count
$total = $ReportData.TestResults.Count

$overallRating = switch ($ReportData.OverallScore) {
    { $_ -ge 90 } { "Excellent" }
    { $_ -ge 80 } { "Very Good" }
    { $_ -ge 70 } { "Good" }
    { $_ -ge 60 } { "Fair" }
    { $_ -ge 40 } { "Poor" }
    default { "Very Poor" }
}
$ratingColor = switch ($overallRating) {
    "Excellent" { "#2ecc71" }
    "Very Good" { "#27ae60" }
    "Good" { "#3498db" }
    "Fair" { "#f39c12" }
    "Poor" { "#e67e22" }
    default { "#e74c3c" }
}

$HTML = @"
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Professional Laptop Inspection Report</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #2c3e50;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: #fff;
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
        }
        .header {
            background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
            color: white;
            padding: 40px 30px;
            text-align: center;
            position: relative;
            overflow: hidden;
        }
        .header h1 {
            font-size: 3em;
            margin-bottom: 10px;
            font-weight: 300;
            position: relative;
            z-index: 1;
        }
        .header .subtitle {
            font-size: 1.2em;
            opacity: 0.9;
            position: relative;
            z-index: 1;
        }
        .overall-score {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            padding: 30px;
            text-align: center;
            border-bottom: 1px solid #dee2e6;
        }
        .score-display {
            display: inline-block;
            width: 120px;
            height: 120px;
            border-radius: 50%;
            background: conic-gradient($ratingColor 0deg, $ratingColor $(($ReportData.OverallScore * 3.6))deg, #e9ecef $(($ReportData.OverallScore * 3.6))deg, #e9ecef 360deg);
            align-items: center;
            justify-content: center;
            margin: 0 auto 20px;
            position: relative;
            display: flex;
        }
        .score-display::before {
            content: '';
            position: absolute;
            width: 90px;
            height: 90px;
            background: white;
            border-radius: 50%;
        }
        .score-number {
            font-size: 2.5em;
            font-weight: bold;
            color: $ratingColor;
            position: relative;
            z-index: 1;
        }
        .score-rating {
            font-size: 1.5em;
            font-weight: 600;
            color: $ratingColor;
            margin-bottom: 10px;
        }
        .summary-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            padding: 30px;
            background: #f8f9fa;
        }
        .stat-card {
            background: white;
            padding: 25px;
            border-radius: 10px;
            text-align: center;
            box-shadow: 0 5px 15px rgba(0,0,0,0.08);
            transition: transform 0.3s ease;
        }
        .stat-card:hover {
            transform: translateY(-5px);
        }
        .stat-number {
            font-size: 2.5em;
            font-weight: bold;
            margin-bottom: 10px;
        }
        .stat-label {
            font-size: 0.9em;
            text-transform: uppercase;
            letter-spacing: 1px;
            opacity: 0.7;
        }
        .pass { color: #27ae60; }
        .warn { color: #f39c12; }
        .fail { color: #e74c3c; }
        .info { color: #3498db; }
        .section {
            margin: 0;
            padding: 30px;
            border-bottom: 1px solid #eee;
        }
        .section:last-child {
            border-bottom: none;
        }
        .section h2 {
            color: #2c3e50;
            margin-bottom: 25px;
            font-size: 1.8em;
            font-weight: 600;
            padding-bottom: 15px;
            border-bottom: 3px solid #3498db;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        .icon {
            font-size: 1.2em;
        }
        .grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 25px;
        }
        .card {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 10px;
            padding: 20px;
            transition: all 0.3s ease;
        }
        .card:hover {
            background: #fff;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        .card h3 {
            color: #495057;
            margin-bottom: 15px;
            font-size: 1.1em;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
            background: white;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 5px 15px rgba(0,0,0,0.08);
        }
        th, td {
            padding: 15px 20px;
            text-align: left;
            border-bottom: 1px solid #dee2e6;
        }
        th {
            background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);
            color: white;
            font-weight: 600;
            font-size: 0.95em;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        tr:hover {
            background: #f8f9fa;
        }
        tr:last-child td {
            border-bottom: none;
        }
        .status-badge {
            display: inline-block;
            padding: 6px 12px;
            border-radius: 20px;
            font-weight: 600;
            font-size: 0.85em;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        .pass-badge {
            background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%);
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        .warn-badge {
            background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
            color: #856404;
            border: 1px solid #ffeaa7;
        }
        .fail-badge {
            background: linear-gradient(135deg, #f8d7da 0%, #f5c6cb 100%);
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        .info-badge {
            background: linear-gradient(135deg, #d1ecf1 0%, #b6e3f0 100%);
            color: #0c5460;
            border: 1px solid #b6e3f0;
        }
        .recommendation {
            background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
            border-left: 5px solid #2196f3;
            padding: 25px;
            margin: 20px 0;
            border-radius: 0 10px 10px 0;
        }
        .recommendation h3 {
            color: #1976d2;
            margin-bottom: 15px;
            font-size: 1.3em;
        }
        .alert {
            background: linear-gradient(135deg, #ffebee 0%, #ffcdd2 100%);
            border-left: 5px solid #f44336;
            padding: 25px;
            margin: 20px 0;
            border-radius: 0 10px 10px 0;
        }
        .alert h3 {
            color: #c62828;
            margin-bottom: 15px;
            font-size: 1.3em;
        }
        .warning {
            background: linear-gradient(135deg, #fff8e1 0%, #ffecb3 100%);
            border-left: 5px solid #ff9800;
            padding: 25px;
            margin: 20px 0;
            border-radius: 0 10px 10px 0;
        }
        .warning h3 {
            color: #f57c00;
            margin-bottom: 15px;
            font-size: 1.3em;
        }
        ul {
            padding-left: 20px;
        }
        li {
            margin: 8px 0;
            line-height: 1.6;
        }
        .system-specs {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }
        .spec-item {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid #3498db;
        }
        .spec-label {
            font-size: 0.9em;
            color: #6c757d;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 5px;
        }
        .spec-value {
            font-size: 1.1em;
            font-weight: 600;
            color: #2c3e50;
        }
        .battery-health {
            text-align: center;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 10px;
            margin: 20px 0;
        }
        .health-circle {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            margin: 0 auto 15px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5em;
            font-weight: bold;
            color: white;
        }
        .final-verdict {
            text-align: center;
            background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
            color: white;
            padding: 40px;
            margin: 0;
        }
        .final-verdict h2 {
            border: none;
            color: white;
            margin-bottom: 20px;
            font-size: 2.2em;
        }
        .verdict-text {
            font-size: 1.4em;
            font-weight: 600;
            margin-bottom: 15px;
        }
        .verdict-details {
            font-size: 1.1em;
            opacity: 0.9;
            max-width: 600px;
            margin: 0 auto;
        }
        .footer {
            text-align: center;
            padding: 20px;
            background: #f8f9fa;
            font-size: 0.9em;
            color: #6c757d;
        }
        @media (max-width: 768px) {
            body {
                padding: 10px;
            }
            .header h1 {
                font-size: 2em;
            }
            .summary-stats {
                grid-template-columns: repeat(2, 1fr);
                gap: 15px;
                padding: 20px;
            }
            .section {
                padding: 20px;
            }
            .grid {
                grid-template-columns: 1fr;
            }
            th, td {
                padding: 10px 15px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🔍 Professional Laptop Inspection</h1>
            <p class="subtitle">Comprehensive Hardware & System Analysis</p>
            <p>Generated: $(Get-Date -Format "dddd, MMMM dd, yyyy 'at' HH:mm:ss")</p>
        </div>
        <div class="overall-score">
            <div class="score-display">
                <div class="score-number">$($ReportData.OverallScore)</div>
            </div>
            <div class="score-rating">$overallRating</div>
            <p>Overall System Health Score</p>
        </div>
        <div class="summary-stats">
            <div class="stat-card">
                <div class="stat-number pass">$pass</div>
                <div class="stat-label">Tests Passed</div>
            </div>
            <div class="stat-card">
                <div class="stat-number warn">$warn</div>
                <div class="stat-label">Warnings</div>
            </div>
            <div class="stat-card">
                <div class="stat-number fail">$fail</div>
                <div class="stat-label">Failed Tests</div>
            </div>
            <div class="stat-card">
                <div class="stat-number info">$info</div>
                <div class="stat-label">Information</div>
            </div>
        </div>
        <div class="section">
            <h2><span class="icon">📋</span>Test Results Overview</h2>
            <table>
                <thead>
                    <tr>
                        <th>Test Category</th>
                        <th>Result</th>
                        <th>Status</th>
                        <th>Details</th>
                        <th>Time</th>
                    </tr>
                </thead>
                <tbody>
"@

$sortedTests = $ReportData.TestResults.GetEnumerator() | Sort-Object {
    switch ($_.Value.Status) {
        "FAIL" { 0 }
        "WARN" { 1 }
        default { 2 }
    }
}
foreach ($test in $sortedTests) {
    $badgeClass = switch ($test.Value.Status) {
        "PASS" { "pass-badge" }
        "WARN" { "warn-badge" }
        "FAIL" { "fail-badge" }
        "INFO" { "info-badge" }
    }
    $HTML += @"
                    <tr>
                        <td><strong>$($test.Key)</strong></td>
                        <td>$($test.Value.Result)</td>
                        <td><span class="status-badge $badgeClass">$($test.Value.Status)</span></td>
                        <td>$($test.Value.Details)</td>
                        <td>$($test.Value.Timestamp)</td>
                    </tr>
"@
}
$HTML += @"
                </tbody>
            </table>
        </div>
        <div class="section">
            <h2><span class="icon">💻</span>System Information</h2>
            <div class="system-specs">
                <div class="spec-item">
                    <div class="spec-label">Computer</div>
                    <div class="spec-value">$($ReportData.SystemInfo.Manufacturer) $($ReportData.SystemInfo.Model)</div>
                </div>
                <div class="spec-item">
                    <div class="spec-label">Operating System</div>
                    <div class="spec-value">$($ReportData.SystemInfo.OSName) ($($ReportData.SystemInfo.OSArchitecture))</div>
                </div>
                <div class="spec-item">
                    <div class="spec-label">Processor</div>
                    <div class="spec-value">$($ReportData.SystemInfo.CPUName)</div>
                </div>
                <div class="spec-item">
                    <div class="spec-label">CPU Specification</div>
                    <div class="spec-value">$($ReportData.SystemInfo.CPUCores) Cores / $($ReportData.SystemInfo.CPUThreads) Threads @ $($ReportData.SystemInfo.CPUSpeed) GHz</div>
                </div>
                <div class="spec-item">
                    <div class="spec-label">Total Memory</div>
                    <div class="spec-value">$($ReportData.SystemInfo.TotalRAM_GB) GB RAM</div>
                </div>
                <div class="spec-item">
                    <div class="spec-label">System Uptime</div>
                    <div class="spec-value">$($ReportData.SystemInfo.Uptime) hours</div>
                </div>
            </div>
        </div>
"@

if ($ReportData.MemoryInfo.Modules.Count -gt 0) {
    $HTML += @"
        <div class="section">
            <h2><span class="icon">🧠</span>Memory Configuration</h2>
            <p><strong>Slots:</strong> $($ReportData.MemoryInfo.UsedSlots) of $($ReportData.MemoryInfo.TotalSlots) memory slots occupied</p>
            <table>
                <thead>
                    <tr>
                        <th>Slot Location</th>
                        <th>Capacity</th>
                        <th>Speed</th>
                        <th>Manufacturer</th>
                        <th>Part Number</th>
                    </tr>
                </thead>
                <tbody>
"@
    foreach ($module in $ReportData.MemoryInfo.Modules) {
        $HTML += @"
                    <tr>
                        <td>$($module.Location)</td>
                        <td>$($module.Capacity_GB) GB</td>
                        <td>$($module.Speed) MHz</td>
                        <td>$($module.Manufacturer)</td>
                        <td>$($module.PartNumber)</td>
                    </tr>
"@
    }
    $HTML += @"
                </tbody>
            </table>
        </div>
"@
}

if ($ReportData.StorageInfo.Count -gt 0) {
    $HTML += @"
        <div class="section">
            <h2><span class="icon">💾</span>Storage Devices</h2>
            <table>
                <thead>
                    <tr>
                        <th>Drive Model</th>
                        <th>Capacity</th>
                        <th>Type</th>
                        <th>Interface</th>
                        <th>Health Status</th>
                    </tr>
                </thead>
                <tbody>
"@
    foreach ($drive in $ReportData.StorageInfo) {
        $healthColor = if ($drive.Health -eq "Healthy") { "pass" } else { "fail" }
        $HTML += @"
                    <tr>
                        <td><strong>$($drive.Model)</strong></td>
                        <td>$($drive.SizeGB) GB</td>
                        <td>$($drive.Media)</td>
                        <td>$($drive.Interface)</td>
                        <td><span class="$healthColor">$($drive.Health)</span></td>
                    </tr>
"@
    }
    $HTML += @"
                </tbody>
            </table>
        </div>
"@
}

if ($ReportData.NetworkInfo.Count -gt 0) {
    $HTML += @"
        <div class="section">
            <h2><span class="icon">🌐</span>Network Capabilities</h2>
            <table>
                <thead>
                    <tr>
                        <th>Adapter Name</th>
                        <th>Type</th>
                        <th>Connection Status</th>
                        <th>Speed</th>
                        <th>MAC Address</th>
                    </tr>
                </thead>
                <tbody>
"@
    foreach ($adapter in $ReportData.NetworkInfo) {
        $statusColor = switch ($adapter.Status) {
            "Connected" { "pass" }
            "Disconnected" { "warn" }
            default { "info" }
        }
        $HTML += @"
                    <tr>
                        <td><strong>$($adapter.Name)</strong></td>
                        <td>$($adapter.Type)</td>
                        <td><span class="$statusColor">$($adapter.Status)</span></td>
                        <td>$($adapter.Speed)</td>
                        <td>$($adapter.MAC)</td>
                    </tr>
"@
    }
    $HTML += @"
                </tbody>
            </table>
        </div>
"@
}

if ($ReportData.BatteryInfo.Name) {
    $batteryColor = switch ($ReportData.BatteryInfo.HealthRating) {
        "Excellent" { "#2ecc71" }
        "Good" { "#27ae60" }
        "Fair" { "#f39c12" }
        "Poor" { "#e74c3c" }
        default { "#95a5a6" }
    }
    $HTML += @"
        <div class="section">
            <h2><span class="icon">🔋</span>Battery Analysis</h2>
            <div class="grid">
                <div class="battery-health">
                    <div class="health-circle" style="background: $batteryColor;">
                        $($ReportData.BatteryInfo.WearPercent)%
                    </div>
                    <h3>Battery Wear Level</h3>
                    <p><strong>$($ReportData.BatteryInfo.HealthRating)</strong> condition</p>
                </div>
                <div class="card">
                    <h3>Battery Specifications</h3>
                    <table style="margin: 0; box-shadow: none;">
                        <tr><td><strong>Battery Name</strong></td><td>$($ReportData.BatteryInfo.Name)</td></tr>
                        <tr><td><strong>Chemistry</strong></td><td>$($ReportData.BatteryInfo.Chemistry)</td></tr>
                        <tr><td><strong>Design Capacity</strong></td><td>$($ReportData.BatteryInfo.DesignCap)</td></tr>
                        <tr><td><strong>Current Full Capacity</strong></td><td>$($ReportData.BatteryInfo.FullCap)</td></tr>
                        <tr><td><strong>Charge Cycles</strong></td><td>$($ReportData.BatteryInfo.Cycles)</td></tr>
                        <tr><td><strong>Current Status</strong></td><td>$($ReportData.BatteryInfo.Status)</td></tr>
                    </table>
                </div>
            </div>
        </div>
"@
}

$hasIssues = ($fail -gt 0) -or ($warn -gt 0) -or ($ReportData.PnpIssues.Count -gt 0)
if ($hasIssues) {
    $HTML += @"
        <div class="section">
            <h2><span class="icon">⚠️</span>Issues & Warnings Detected</h2>
"@
    if ($ReportData.PnpIssues.Count -gt 0) {
        $HTML += @"
            <div class="alert">
                <h3>Hardware Device Problems</h3>
                <table>
                    <thead>
                        <tr>
                            <th>Device Name</th>
                            <th>Device Class</th>
                            <th>Problem Code</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
"@
        foreach ($issue in $ReportData.PnpIssues) {
            $HTML += @"
                        <tr>
                            <td>$($issue.Name)</td>
                            <td>$($issue.Class)</td>
                            <td>$($issue.Problem)</td>
                            <td>$($issue.Status)</td>
                        </tr>
"@
        }
        $HTML += @"
                    </tbody>
                </table>
            </div>
"@
    }
    $problemTests = $ReportData.TestResults.Values | Where-Object { $_.Status -eq "FAIL" -or $_.Status -eq "WARN" }
    if ($problemTests) {
        $HTML += @"
            <div class="warning">
                <h3>Test Issues Summary</h3>
                <ul>
"@
        foreach ($test in $problemTests) {
            $HTML += "<li><strong>$($test.Result)</strong> - $($test.Details)</li>"
        }
        $HTML += @"
                </ul>
            </div>
"@
    }
    $HTML += "</div>"
}

$HTML += @"
        <div class="section">
            <h2><span class="icon">💡</span>Purchase Decision Guide</h2>
            <div class="recommendation">
                <h3>✅ Positive Indicators</h3>
                <ul>
                    <li><strong>Memory:</strong> $($ReportData.SystemInfo.TotalRAM_GB) GB RAM"@
if ($ReportData.SystemInfo.TotalRAM_GB -ge 8) {
    $HTML += " (Excellent)"
} elseif ($ReportData.SystemInfo.TotalRAM_GB -ge 4) {
    $HTML += " (Adequate)"
} else {
    $HTML += " (Low)"
}
$HTML += @"
</li>
                    <li><strong>Storage:</strong> "@
$hasSSD = $ReportData.StorageInfo | Where-Object {$_.Media -eq "SSD"}
if ($hasSSD) {
    $HTML += "SSD detected (Fast performance)"
} else {
    $HTML += "Traditional storage detected"
}
$HTML += @"
</li>
                    <li><strong>Battery:</strong> $($ReportData.BatteryInfo.WearPercent)% wear level"@
if ($ReportData.BatteryInfo.WearPercent -ne "Unknown") {
    $wearNum = [int]$ReportData.BatteryInfo.WearPercent
    if ($wearNum -lt 40) {
        $HTML += " (Good condition)"
    } elseif ($wearNum -lt 60) {
        $HTML += " (Fair condition)"
    }
}
$HTML += @"
</li>
                    <li><strong>Hardware:</strong> "@
if ($ReportData.PnpIssues.Count -eq 0) {
    $HTML += "No device errors detected"
} else {
    $HTML += "$($ReportData.PnpIssues.Count) device issues found"
}
$HTML += @"
</li>
                    <li><strong>Connectivity:</strong> "@
$hasWiFiAdapter = $ReportData.NetworkInfo | Where-Object {$_.Type -eq "WiFi"}
$hasEthernetAdapter = $ReportData.NetworkInfo | Where-Object {$_.Name -match "Ethernet"}
if ($hasWiFiAdapter) {
    $HTML += "WiFi capable"
} else {
    $HTML += "No WiFi detected"
}
if ($hasEthernetAdapter) {
    $HTML += ", Ethernet port available"
}
$HTML += @"
</li>
                </ul>
            </div>
"@

if ($fail -gt 0 -or $warn -gt 2) {
    $HTML += @"
            <div class="alert">
                <h3>🚨 Warning Signs</h3>
                <ul>
"@
    if ($fail -gt 0) {
        $HTML += "<li><strong>Critical Issues:</strong> $fail tests failed - investigate before purchase</li>"
    }
    if ($ReportData.BatteryInfo.WearPercent -ne "Unknown") {
        $wearNum = [int]$ReportData.BatteryInfo.WearPercent
        if ($wearNum -gt 60) {
            $HTML += "<li><strong>Battery Health:</strong> High wear level ($($ReportData.BatteryInfo.WearPercent)%) - replacement likely needed</li>"
        }
    }
    if ($ReportData.SystemInfo.TotalRAM_GB -lt 4) {
        $HTML += "<li><strong>Low Memory:</strong> $($ReportData.SystemInfo.TotalRAM_GB) GB may not be sufficient for Windows 10/11</li>"
    }
    if ($ReportData.PnpIssues.Count -gt 0) {
        $HTML += "<li><strong>Hardware Problems:</strong> $($ReportData.PnpIssues.Count) device(s) showing errors</li>"
    }
    $HTML += @"
                </ul>
            </div>
"@
}
$HTML += @"
            <div class="recommendation">
                <h3>🔍 Still Need Manual Testing</h3>
                <ul>
                    <li><strong>Display:</strong> Check for dead pixels, brightness levels, color accuracy</li>
                    <li><strong>Input Devices:</strong> Test every keyboard key, trackpad functionality, click buttons</li>
                    <li><strong>Ports & Connectivity:</strong> Verify all USB, HDMI, audio jacks, card readers</li>
                    <li><strong>Audio:</strong> Test speakers, microphone, headphone jack</li>
                    <li><strong>Camera:</strong> Check webcam functionality and quality</li>
                    <li><strong>Physical Condition:</strong> Inspect for cracks, loose hinges, wear patterns</li>
                    <li><strong>Thermal Performance:</strong> Run stress test to check for overheating</li>
                    <li><strong>Battery Life:</strong> Perform actual runtime test</li>
                </ul>
            </div>
        </div>
        <div class="final-verdict">
            <h2>🎯 Final Assessment</h2>
            <div class="verdict-text" style="color: $ratingColor;">
                $overallRating ($($ReportData.OverallScore)/100)
            </div>
            <div class="verdict-details">
"@
$verdictText = switch ($overallRating) {
    "Excellent" { "This laptop shows excellent technical health with no significant issues. Highly recommended for purchase." }
    "Very Good" { "This laptop is in very good condition with only minor concerns. Good choice for purchase." }
    "Good" { "This laptop shows good overall health. A solid choice with some minor considerations." }
    "Fair" { "This laptop has some issues but may be acceptable depending on price and intended use." }
    "Poor" { "This laptop shows multiple problems. Purchase only if significantly discounted and issues are acceptable." }
    default { "This laptop has serious issues. Not recommended unless for parts or major repairs." }
}
$HTML += @"
                $verdictText
            </div>
            <p style="margin-top: 20px; font-size: 0.9em; opacity: 0.8;">
                Score based on $($ReportData.TestResults.Count) automated tests • Always perform manual inspection before purchase
            </p>
        </div>
        <div class="footer">
            <p>Report generated by Enhanced Laptop Inspection Script v2.1</p>
            <p>$(Get-Date -Format "yyyy-MM-dd HH:mm:ss") • Automated analysis should be supplemented with manual testing</p>
        </div>
    </div>
</body>
</html>
"@

#-------------------------------------------------
# SAVE AND DISPLAY REPORT (CLEAN UTF-8 WITHOUT BOM)
#-------------------------------------------------
try {
    [System.IO.File]::WriteAllText($OutputPath, $HTML, [System.Text.UTF8Encoding]::new($false))
    Write-Host "✅ Enhanced report generated successfully!" -ForegroundColor Green
    Write-Host "📄 Report saved to: $OutputPath" -ForegroundColor Cyan
    try {
        Start-Process $OutputPath
        Write-Host "🌐 Report opened in default browser" -ForegroundColor Green
    } catch {
        Write-Host "⚠️  Could not auto-open report. Please open manually: $OutputPath" -ForegroundColor Yellow
    }
} catch {
    Write-Host "❌ Failed to save report: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

#-------------------------------------------------
# CONSOLE SUMMARY
#-------------------------------------------------
Write-Host "`n" + "="*70 -ForegroundColor Gray
Write-Host "🏁 LAPTOP INSPECTION COMPLETE" -ForegroundColor Green
Write-Host "="*70 -ForegroundColor Gray
Write-Host "`n📊 RESULTS SUMMARY:" -ForegroundColor Cyan
Write-Host "   ✅ Passed  : $pass tests" -ForegroundColor Green
Write-Host "   ⚠️  Warnings: $warn tests" -ForegroundColor Yellow
Write-Host "   ❌ Failed  : $fail tests" -ForegroundColor Red
Write-Host "   ℹ️  Info    : $info tests" -ForegroundColor Cyan
Write-Host "`n🎯 OVERALL SCORE: $($ReportData.OverallScore)/100 ($overallRating)" -ForegroundColor $(
    switch ($overallRating) {
        "Excellent" { "Green" }
        "Very Good" { "Green" }
        "Good" { "Cyan" }
        "Fair" { "Yellow" }
        default { "Red" }
    }
)
$recommendation = switch ($ReportData.OverallScore) {
    { $_ -ge 85 } { "✅ RECOMMENDED - Excellent condition" }
    { $_ -ge 70 } { "👍 GOOD CHOICE - Minor issues only" }
    { $_ -ge 55 } { "⚠️  PROCEED WITH CAUTION - Several concerns" }
    default { "❌ NOT RECOMMENDED - Major issues detected" }
}
Write-Host "`n🛒 PURCHASE RECOMMENDATION:" -ForegroundColor Cyan
Write-Host "   $recommendation" -ForegroundColor $(
    if ($ReportData.OverallScore -ge 85) { "Green" }
    elseif ($ReportData.OverallScore -ge 70) { "Cyan" }
    elseif ($ReportData.OverallScore -ge 55) { "Yellow" }
    else { "Red" }
)
if ($ReportData.BatteryInfo.WearPercent -ne "Unknown") {
    Write-Host "`n🔋 Battery Health: $($ReportData.BatteryInfo.WearPercent)% wear ($($ReportData.BatteryInfo.HealthRating))" -ForegroundColor $(
        switch ($ReportData.BatteryInfo.HealthRating) {
            "Excellent" { "Green" }
            "Good" { "Green" }
            "Fair" { "Yellow" }
            default { "Red" }
        }
    )
}
Write-Host "`n📄 Detailed report saved to: $OutputPath" -ForegroundColor Gray
Write-Host "`n👆 Press Enter to exit..." -ForegroundColor Gray
Read-Host
